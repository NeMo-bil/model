openapi: 3.0.1
info:
  title: NeMoBil Datamodel
  description: Reduced data model to be used in the NeMoBil project
  version: v0
paths:
  /test:
    get:
      tags:
        - test
      responses:
        '200':
          description: Success

components:
  schemas:
    Trip:
      type: object
      properties:
        id:
          type: string
          description: Kennung der Fahrt
        user:
          $ref: '#/components/schemas/User'
          description: Anfragender User
        vehicle:
          $ref: '#/components/schemas/Vehicle'
        pickupLocation:
          $ref: '#/components/schemas/Place'
        dropoffLocation:
          $ref: '#/components/schemas/Place'
        pickupTime:
          type: string
          description: "Geplante Abholzeit\r\nToleranz - Range => Interval"
          format: date-time
        targetTime:
          type: string
          description: "Erwartete Ankunftszeit\r\nToleranz - Range => Interval"
          format: date-time
        costs:
          type: number
          description: Kosten für die Fahrt
          format: float
        carpoolInformation:
          $ref: '#/components/schemas/NemobilAPI.Model.CarpoolInformation'
        skills:
          type: array
          items:
            $ref: '#/components/schemas/NemobilAPI.Model.Skill'
          description: 'Besonderheiten z.B: Kinderwagen, Rollstuhl, sonst. Einschränkungen'
          nullable: true
        requestedAdults:
          type: integer
          description: Wie viele Erwachsene sollen transportiert werden
          format: int32
        requestedChilds:
          type: integer
          description: Wie viele Kinder sollen transportiert werden
          format: int32
        luggage:
          type: integer
          description: Gepäck
          format: int32
        personalPreferences:
          $ref: '#/components/schemas/NemobilAPI.Contracts.RideRequest.CustomerPreferences'
        status:
          enum:
            - Unplanned
            - Planned
            - Started
            - Canceled
            - Rejected
            - Performed
          type: String
          description: Status der Fahrt
        payment:
          type: string
          description: payment information of the trip
          enum:
            - Permitted
            - Denied
        expectedEnergyRequired:
          type: number
          description: Geschätzte Energie für die Strecke
          format: float
        expectedDrivingTime:
          type: number
          description: Geschätzte Fahrzeit für die Strecke
          format: float
        expectedDistance:
          type: number
          description: Geschätzte Distanz für die Strecke
          format: float
      additionalProperties: false
      description: "Daten eines Trips\r\nhttps://github.com/smart-data-models/dataModel.Transportation/blob/master/FleetVehicleOperation/doc/spec.md"
      example:
        id: someId
        userGuid: someUser

    TripRequest:
      type: object
      properties:
        id:
          type: string
          description: Request ID
        user:
          $ref: '#/components/schemas/User'
          description: Anfragender User
        startLocation:
          $ref: 'https://fiware.github.io/tutorials.NGSI-LD/models/ngsi-ld.yaml#/location'
        targetLocation:
          $ref: '#/components/schemas/Place'
        targetTime:
          type: string
          description: "<br>Gewünschte Ankunftszeit \r\n<br>(Target - Toleranz davor)"
          format: date-time
          nullable: true
        pickupTime:
          type: string
          description: "<br>Gewünschte Abholzeit\r\n<br>(Pickup + Toleranz danach)"
          format: date-time
          nullable: true
        skills:
          type: array
          items:
            $ref: '#/components/schemas/NemobilAPI.Model.Skill'
          description: 'Besonderheiten z.B: Kinderwagen, Rollstuhl, sonst. Einschränkungen'
          nullable: true
        requestedAdults:
          type: integer
          description: Wie viele Erwachsene sollen transportiert werden
          format: int32
        requestedChilds:
          type: integer
          description: Wie viele Kinder sollen transportiert werden
          format: int32
        luggage:
          type: integer
          description: Gepäck
          format: int32
        personalPreferences:
          $ref: '#/components/schemas/NemobilAPI.Contracts.RideRequest.CustomerPreferences'
        vehicle:
          $ref: '#/components/schemas/Vehicle'
          nullable: true
        priority:
          type: integer
          description: Priority of the request. Higher values represent more important requests
          format: int32
      additionalProperties: false
      description: "<br>Parameter für eine Fahrtanfrage\r\n<br>https://github.com/moia-oss/alonso-mora/blob/master/core/src/main/java/org/matsim/alonso_mora/algorithm/DefaultAlonsoMoraRequest.java"
    Place:
      description: 'Geojson reference to the item. It can be Point, LineString, Polygon, MultiPoint, MultiLineString or MultiPolygon. Should be a reference to location'
      oneOf:
        - description: Geojson reference to the item. Point
          properties:
            bbox:
              items:
                type: number
              minItems: 4
              type: array
            coordinates:
              items:
                type: number
              minItems: 2
              type: array
            type:
              enum:
                - Point
              type: string
          required:
            - type
            - coordinates
          title: GeoJSON Point
          type: object
          x-ngsi:
            type: GeoProperty
        - description: Geojson reference to the item. LineString
          properties:
            bbox:
              items:
                type: number
              minItems: 4
              type: array
            coordinates:
              items:
                items:
                  type: number
                minItems: 2
                type: array
              minItems: 2
              type: array
            type:
              enum:
                - LineString
              type: string
          required:
            - type
            - coordinates
          title: GeoJSON LineString
          type: object
          x-ngsi:
            type: GeoProperty
        - description: Geojson reference to the item. Polygon
          properties:
            bbox:
              items:
                type: number
              minItems: 4
              type: array
            coordinates:
              items:
                items:
                  items:
                    type: number
                  minItems: 2
                  type: array
                minItems: 4
                type: array
              type: array
            type:
              enum:
                - Polygon
              type: string
          required:
            - type
            - coordinates
          title: GeoJSON Polygon
          type: object
          x-ngsi:
            type: GeoProperty
        - description: Geojson reference to the item. MultiPoint
          properties:
            bbox:
              items:
                type: number
              minItems: 4
              type: array
            coordinates:
              items:
                items:
                  type: number
                minItems: 2
                type: array
              type: array
            type:
              enum:
                - MultiPoint
              type: string
          required:
            - type
            - coordinates
          title: GeoJSON MultiPoint
          type: object
          x-ngsi:
            type: GeoProperty
        - description: Geojson reference to the item. MultiLineString
          properties:
            bbox:
              items:
                type: number
              minItems: 4
              type: array
            coordinates:
              items:
                items:
                  items:
                    type: number
                  minItems: 2
                  type: array
                minItems: 2
                type: array
              type: array
            type:
              enum:
                - MultiLineString
              type: string
          required:
            - type
            - coordinates
          title: GeoJSON MultiLineString
          type: object
          x-ngsi:
            type: GeoProperty
        - description: Geojson reference to the item. MultiLineString
          properties:
            bbox:
              items:
                type: number
              minItems: 4
              type: array
            coordinates:
              items:
                items:
                  items:
                    items:
                      type: number
                    minItems: 2
                    type: array
                  minItems: 4
                  type: array
                type: array
              type: array
            type:
              enum:
                - MultiPolygon
              type: string
          required:
            - type
            - coordinates
          title: GeoJSON MultiPolygon
          type: object
          x-ngsi:
            type: GeoProperty
      x-ngsi:
        type: GeoProperty

    NemobilAPI.Contracts.RideRequest.CustomerPreferences:
      type: object
      properties:
        allowCarpooling:
          type: boolean
          description: Der Kunde erlaubt Mitfahrer bei seiner Fahrt
        toleratedDelayBefore:
          type: integer
          description: Der Kunde erlaubt folgende Verzögerung auf seinem Weg
          format: int32
        toleratedDelayAfter:
          type: integer
          description: Der Kunde erlaubt folgende Verzögerung auf seinem Weg
          format: int32
      additionalProperties: false
      description: Wünsche des Kunden bei der Anfrage
    User:
      type: object
      properties:
        id:
          type: string
          description: User ID
          format: uuid
        surname:
          type: string
          description: User surname
    TripProposal:
      type: object
      properties:
        id:
          type: string
          description: Proposal ID
        request:
          $ref: '#/components/schemas/TripRequest'
        user:
          $ref: '#/components/schemas/User'
        pickupLocation:
          $ref: '#/components/schemas/Place'
        dropoffLocation:
          $ref: '#/components/schemas/Place'
        pickupTime:
          type: string
          description: "Geplante Abholzeit\r\nToleranz - Range => Interval"
          format: date-time
        targetTime:
          type: string
          description: "Erwartete Ankunftszeit\r\nToleranz - Range => Interval"
          format: date-time
        costs:
          type: number
          description: Erwartete Kosten für die Fahrt
          format: float
        proposalReleaseTime:
          type: string
          description: Bis wann wird der Proposal freigehalten
          format: date-time
      additionalProperties: false
      description: Vorschlag für eine Fahrtanfrage


    Skill:
      type: object
      properties:
        skillId:
          type: integer
          description: Id des Skills
          format: int32
        skillName:
          type: string
          description: Name des Skills
          nullable: true
      additionalProperties: false
      description: Skills, die Cabs von Nemobil erfüllen können

    Vehicle:
      type: object
      description: "Sensor-Werte eines Fahrzeugs\r\nhttps://github.com/smart-data-models/dataModel.Transportation/blob/master/FleetVehicleStatus/doc/spec.md"
      properties:
        id:
          type: string
          description: Unique identifier of the entity
        location:
          $ref: '#/components/schemas/Place'
        licensePlate:
          type: string
          description: License plate of the vehicle
        nextStopLocation:
          $ref: '#/components/schemas/Place'
        nextStopArrival:
          type: string
          description: "Planned time of arrivial at next stop"
          format: date-time
        vehicleScheduleGuid:
          type: string
          description: ID des Vehicle Schedule Entry
        stateOfSchedule:
          enum:
            - Running
            - StartSchedule
            - EndSchedule
          type: String
          description: "State of Schedule\r\nAnmeldung, Abmeldung oder laufend der Schicht"
        batteryLevel:
          type: number
          description: "Der aktuelle Prozentsatz der verbleibenden Batterie im Falle eines Elektrofahrzeugs\r\nAngabe in Prozent"
          format: float
        remainingRange:
          type: number
          description: Aktuelle Restreichweite
          format: float
        consumption:
          type: number
          description: Aktueller Energieverbrauch
          format: float
        state:
          type: array
          items:
            $ref: '#/components/schemas/VehicleState'
          description: "Stati des Fahrzeuges"
        bearing:
          type: number
          description: "Current heading of the vehicle relative to north"
          format: float
        speed:
          type: number
          description: "Current speed"
          format: float
        deviation:
          type: number
          description: "+ => Besser als Vorgesehen\r\n- => Im Verzug"
          format: float
        chargingPower:
          type: number
          description: Aktuelle Ladeleistungs
          format: float
        chargedPower:
          type: number
          description: Aktuell geladene Energie (Nur wenn das Fahrzeug aktuell geladen wird)
          format: float
        mileageFromOdometer:
          type: integer
          description: "Aktueller Kilometerstand\r\nDie Gesamtentfernung, die das Flottenfahrzeug gemäß dem eingebauten Kilometerzähler in Kilometern (unitCode KMT) oder Meilen (unitCode SMI) zurückgelegt hat. Siehe auch Schema.org Vehicle/ mileageFromOdometer. Das Element timestamp hält fest, wann der Kilometerstand gemessen wurde"
          format: int32
        chainedVehicles:
          type: integer
          description: "Wie viele Cabs fahre ich gerade\r\nNur PRO"
          format: int32
        chainedPosition:
          type: integer
          description: "Position inside the convoy"
          format: int32
        powerSupply:
          type: integer
          description: "Wie viele Energie geben ich gerade an zu ladene Cabs weiter?\r\nNur PRO"
          format: int32
        feature:
          type: array
          description: Besonderheiten die dieses Fahrzeug unterstützt
          items:
            $ref: '#/components/schemas/NemobilAPI.Model.Skill'
      additionalProperties: false

    NemobilAPI.Model.CarpoolInformation:
      type: object
      properties:
        passengersOnBoard:
          type: boolean
          description: Sind bereits Mitfahrer im Cab
        passengerBoarding:
          type: boolean
          description: Steigt während der Fahrt jemand hinzu
      additionalProperties: false
      description: Informationen über Carpooling
    NemobilAPI.Model.Skill:
      type: object
      properties:
        skillId:
          type: integer
          description: Id des Skills
          format: int32
        skillName:
          type: string
          description: Name des Skills
          nullable: true
      additionalProperties: false
      description: Skills, die Cabs von Nemobil erfüllen können
    VehicleState:
      type: string
      enum:
        - DoorsOpened
        - Idle
        - WaintingForCustomer
        - Konvoi
        - CustomerTransport
        - Charging
        - Accident
        - TrafficJam
      description: "Status des Fahrzeugs\r\nEine Beschreibung des aktuellen Status des Fahrzeugs"
    Notification:
      type: object
      properties:
        id:
          type: string
          description: Unique identifier of the entity
        type:
          type: string
          description: Type Notification
          enum:
            - Notification
        subscriptionId:
          type: string
          description: Unique identifier of the subscription
        notifiedAt:
          type: string
          description: "Time of notification"
          format: date-time
        data:
          type: array
          items:
            $ref: '#/components/schemas/NotificationPayload'
    NotificationPayload:
      type: object
      properties:
        id:
          type: string
          description: Unique identifier of the entity
        type:
          type: string
          description: Type Payload
      additionalProperties: true