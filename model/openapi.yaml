openapi: 3.0.1
info:
  title: NeMoBil Datenmodell
  description: Datenmodel
  version: v0
paths:
  /test:
    get:
      tags:
        - test
      responses:
        '200':
          description: Success

components:
  schemas:
    TripRequest:
      type: object
      properties:
        userGuid:
          type: string
          description: Anfragender User
          format: uuid
        startLoction:
          $ref: '#/components/schemas/NemobilAPI.Model.Location'
        targetLocation:
          $ref: '#/components/schemas/NemobilAPI.Model.Location'
        targetTime:
          type: string
          description: "<br>Gewünschte Ankunftszeit \r\n<br>(Target - Toleranz davor)"
          format: date-time
          nullable: true
        pickupTime:
          type: string
          description: "<br>Gewünschte Abholzeit\r\n<br>(Pickup + Toleranz danach)"
          format: date-time
          nullable: true
        skills:
          type: array
          items:
            $ref: '#/components/schemas/NemobilAPI.Model.Skill'
          description: 'Besonderheiten z.B: Kinderwagen, Rollstuhl, sonst. Einschränkungen'
          nullable: true
        requestedAdults:
          type: integer
          description: Wie viele Erwachsene sollen transportiert werden
          format: int32
        requestedChilds:
          type: integer
          description: Wie viele Kinder sollen transportiert werden
          format: int32
        luggage:
          type: integer
          description: Gepäck
          format: int32
        maxCabs:
          type: integer
          description: Wie viele Cabs sollen für den Transport maximal kommen
          format: int32
        personalPreferences:
          $ref: '#/components/schemas/NemobilAPI.Contracts.RideRequest.CustomerPreferences'
      additionalProperties: false
      description: "<br>Parameter für eine Fahrtanfrage\r\n<br>https://github.com/moia-oss/alonso-mora/blob/master/core/src/main/java/org/matsim/alonso_mora/algorithm/DefaultAlonsoMoraRequest.java"
    TripRequestProposal:
      type: object
      properties:
        id:
          type: string
          description: Proposal ID
          format: uuid
        cabPickupLocation:
          $ref: '#/components/schemas/NemobilAPI.Model.Location'
        cabDropoffLocation:
          $ref: '#/components/schemas/NemobilAPI.Model.Location'
        pickupTime:
          type: string
          description: "Geplante Abholzeit\r\nToleranz - Range => Interval"
          format: date-time
        targetTime:
          type: string
          description: "Erwartete Ankunftszeit\r\nToleranz - Range => Interval"
          format: date-time
        costs:
          type: number
          description: Erwartete Kosten für die Fahrt
          format: float
        proposalReleaseTime:
          type: string
          description: Bis wann wird der Proposal freigehalten
          format: date-time
      additionalProperties: false
      description: Vorschlag für eine Fahrtanfrage
    TripBooking:
      type: object
      properties:
        id:
          type: string
          description: Booking ID
          format: uuid
        tripRequest:
          $ref: '#/components/schemas/TripRequest'
        tripRequestProposal:
          $ref: '#/components/schemas/TripRequestProposal'
        lifecycle:
          type: string
          description: "Enum Requested, Confirmed, Canceled, Rejected, Done"
          enum:
            - Requested
            - Confirmed
            - Canceled
            - Rejected
            - Done

    Trip:
      type: object
      properties:
        tripGuid:
          type: string
          description: Kennung der Fahrt
          format: uuid
        userGuid:
          type: string
          description: Anfragender User
          format: uuid
        creationTime:
          type: string
          description: Zeit der Anfrage
          format: date-time
        vehicle:
          $ref: '#/components/schemas/NemobilAPI.Contracts.VehicleSchedule.Data.CabSchedule'
        cabStartLocation:
          $ref: '#/components/schemas/NemobilAPI.Model.Location'
        cabTargetLocation:
          $ref: '#/components/schemas/NemobilAPI.Model.Location'
        pickupTime:
          type: string
          description: "Geplante Abholzeit\r\nToleranz - Range => Interval"
          format: date-time
        targetTime:
          type: string
          description: "Erwartete Ankunftszeit\r\nToleranz - Range => Interval"
          format: date-time
        costs:
          type: number
          description: Kosten für die Fahrt
          format: float
        carpoolInformation:
          $ref: '#/components/schemas/NemobilAPI.Model.CarpoolInformation'
        skills:
          type: array
          items:
            $ref: '#/components/schemas/NemobilAPI.Model.Skill'
          description: 'Besonderheiten z.B: Kinderwagen, Rollstuhl, sonst. Einschränkungen'
          nullable: true
        requestedAdults:
          type: integer
          description: Wie viele Erwachsene sollen transportiert werden
          format: int32
        requestedChilds:
          type: integer
          description: Wie viele Kinder sollen transportiert werden
          format: int32
        luggage:
          type: integer
          description: Gepäck
          format: int32
        maxCabs:
          type: integer
          description: Wie viele Cabs sollen für den Transport maximal kommen
          format: int32
        personalPreferences:
          $ref: '#/components/schemas/NemobilAPI.Contracts.RideRequest.CustomerPreferences'
        status:
          enum:
            - 0 - Unplanned
            - 1 - Planned
            - 2 - Started
            - 3 - Performed
          type: integer
          description: Status der Fahrt
          format: int32
        modificationDate:
          type: string
          description: Letztes Änderungsdatum
          format: date-time
        expectedEnergyRequired:
          type: number
          description: Geschätzte Energie für die Strecke
          format: float
        expectedDrivingTime:
          type: number
          description: Geschätzte Fahrzeit für die Strecke
          format: float
        expectedDistance:
          type: number
          description: Geschätzte Distanz für die Strecke
          format: float
      additionalProperties: false
      description: "Daten eines Trips\r\nhttps://github.com/smart-data-models/dataModel.Transportation/blob/master/FleetVehicleOperation/doc/spec.md"
    NemobilAPI.Contracts.SonsorData.Data.VehicleStatus:
      type: object
      properties:
        guid:
          type: string
          description: Unique identifier of the entity
          format: uuid
        vehicleScheduleGuid:
          type: string
          description: Sensorwert des Vehicle Schedule Entry
          format: uuid
        stateOfSchedule:
          enum:
            - 0 - Running
            - 1 - StartSchedule
            - 2 - EndSchedule
          type: integer
          description: "State of Schedule\r\nAnmeldung, Abmeldung oder laufend der Schicht"
          format: int32
        batteryLevel:
          type: number
          description: "Der aktuelle Prozentsatz der verbleibenden Batterie im Falle eines Elektrofahrzeugs\r\nAngabe in Prozent"
          format: float
        remainingRange:
          type: number
          description: Aktuelle Restreichweite
          format: float
        consumption:
          type: number
          description: Aktueller Energieverbrauch
          format: float
        energyConsumptionSinceLastStop:
          type: number
          description: Energieverbrauch seit dem letzten Stop
          format: float
        location:
          $ref: '#/components/schemas/NemobilAPI.Model.Location'
        state:
          enum:
            - 0 - None
            - 1 - DoorsOpened
            - 2 - Idle
            - 4 - WaintingForCustomer
            - 8 - Konvoi
            - 16 - CustomerTransport
            - 32 - Charging
            - 64 - Accident
            - 128 - TrafficJam
          type: integer
          description: "Status des Fahrzeugs\r\nEine Beschreibung des aktuellen Status des Fahrzeugs"
          format: int32
        drivingState:
          $ref: '#/components/schemas/NemobilAPI.Contracts.SonsorData.Data.DrivingState'
        deviation:
          type: number
          description: "+ => Besser als Vorgesehen\r\n- => Im Verzug"
          format: float
        chargingPower:
          type: number
          description: Aktuelle Ladeleistungs
          format: float
        chargedPower:
          type: number
          description: Aktuell geladene Energie (Nur wenn das Fahrzeug aktuell geladen wird)
          format: float
        tireAirPressure:
          type: number
          description: Für alle 4 Reifen oder wie am besten?
          format: float
        mileageFromOdometer:
          type: integer
          description: "Aktueller Kilometerstand\r\nDie Gesamtentfernung, die das Flottenfahrzeug gemäß dem eingebauten Kilometerzähler in Kilometern (unitCode KMT) oder Meilen (unitCode SMI) zurückgelegt hat. Siehe auch Schema.org Vehicle/ mileageFromOdometer. Das Element timestamp hält fest, wann der Kilometerstand gemessen wurde"
          format: int32
        load:
          type: integer
          description: "Aktuelle Beladung\r\nNur CAB?"
          format: int32
        weight:
          type: integer
          description: "Aktuelles Gesamtgewicht des Fahrzeugs\r\nNur CAB?"
          format: int32
        chainedVehicles:
          type: integer
          description: "Wie viele Cabs fahre ich gerade\r\nNur PRO"
          format: int32
        powerSupply:
          type: integer
          description: "Wie viele Energie geben ich gerade an zu ladene Cabs weiter?\r\nNur PRO"
          format: int32
        temperatureIndoor:
          type: number
          description: "Aktuelle Temperatur innerhalb des Fahrzeugs\r\nNur CAB"
          format: float
        temperatureOutside:
          type: number
          description: "Aktuelle Temperatur ausßerhalb des Fahrzeugs\r\nNur CAB oder auch PRO insteressant"
          format: float
        dateCreated:
          type: string
          description: Entity creation timestamp. This will usually be allocated by the storage platform
          format: date-time
      additionalProperties: false
      description: "Sensor-Werte eines Fahrzeugs\r\nhttps://github.com/smart-data-models/dataModel.Transportation/blob/master/FleetVehicleStatus/doc/spec.md"

    NemobilAPI.Contracts.RideRequest.TripRequestParameter:
      type: object
      properties:
        userGuid:
          type: string
          description: Anfragender User
          format: uuid
        currentLoction:
          $ref: '#/components/schemas/NemobilAPI.Model.Location'
        targetLocation:
          $ref: '#/components/schemas/NemobilAPI.Model.Location'
        targetTime:
          type: string
          description: "<br>Gewünschte Ankunftszeit \r\n<br>(Target - Toleranz davor)"
          format: date-time
          nullable: true
        pickupTime:
          type: string
          description: "<br>Gewünschte Abholzeit\r\n<br>(Pickup + Toleranz danach)"
          format: date-time
          nullable: true
        skills:
          type: array
          items:
            $ref: '#/components/schemas/NemobilAPI.Model.Skill'
          description: 'Besonderheiten z.B: Kinderwagen, Rollstuhl, sonst. Einschränkungen'
          nullable: true
        requestedAdults:
          type: integer
          description: Wie viele Erwachsene sollen transportiert werden
          format: int32
        requestedChilds:
          type: integer
          description: Wie viele Kinder sollen transportiert werden
          format: int32
        luggage:
          type: integer
          description: Gepäck
          format: int32
        maxCabs:
          type: integer
          description: Wie viele Cabs sollen für den Transport maximal kommen
          format: int32
        personalPreferences:
          $ref: '#/components/schemas/NemobilAPI.Contracts.RideRequest.CustomerPreferences'
      additionalProperties: false
      description: "<br>Parameter für eine Fahrtanfrage\r\n<br>https://github.com/moia-oss/alonso-mora/blob/master/core/src/main/java/org/matsim/alonso_mora/algorithm/DefaultAlonsoMoraRequest.java"
    NemobilAPI.Contracts.RideRequest.TripRequestResponse:
      type: object
      properties:
        bookingTransaction:
          type: string
          description: Guid der Buchung
          format: uuid
        proposals:
          type: array
          items:
            $ref: '#/components/schemas/NemobilAPI.Model.TripRequestProposal'
          description: Vorschläge, zwischen denen der Kunde auswählen kann
          nullable: true
      additionalProperties: false
      description: Ergebnisse der Planung nach einer Fahrtanfrage
    NemobilAPI.Contracts.SonsorData.Data.ChargingPointStatus:
      type: object
      properties:
        chargingPointGuid:
          type: string
          description: Guid des Ladepunkts
          format: uuid
        state:
          enum:
            - 0 - Free
            - 1 - InUse
            - 2 - Maintenance
          type: integer
          description: Status des Ladepunkts
          format: int32
      additionalProperties: false
      description: Statusmeldung des Ladepunkts
    NemobilAPI.Contracts.SonsorData.Data.DrivingState:
      type: object
      properties:
        bearing:
          type: integer
          description: "Aktuelle Fahrtrichtung des Fahrzeugs\r\nDie aktuelle Peilung des Flottenfahrzeugs in Grad relativ zu Nord. Das Zeitstempel-Element des Attributs sollte angeben, wann der Messwert ermittelt wurde"
          format: int32
        speed:
          type: integer
          description: Die aktuelle Geschwindigkeit des Fahrzeugs (km/h).
          format: int32
      additionalProperties: false
      description: Fahrdaten

    NemobilAPI.Contracts.TourReportResult:
      type: object
      properties:
        vehicleGuid:
          type: string
          description: Fahrzeug
          format: uuid
        timeInterval:
          $ref: '#/components/schemas/NemobilAPI.Model.Interval'
        drivingTime:
          type: integer
          description: Fahrzeit in Sekunden
          format: int64
        drivingDistance:
          type: number
          description: Gefahrene Distanz
          format: double
        idleTime:
          type: integer
          description: Wartezeit
          format: int64
        trips:
          type: array
          items:
            $ref: '#/components/schemas/NemobilAPI.Model.Trip'
          description: Liste der Fahrten
          nullable: true
        energyConsumption:
          type: number
          description: Energie verbraucht
          format: double
        energyCharged:
          type: number
          description: Energie geladen
          format: double
        revenue:
          type: number
          description: Umsatz
          format: double
        costs:
          type: number
          description: Kosten im Zeitraum
          format: double
      additionalProperties: false
      description: Report einer Tour
    NemobilAPI.Contracts.Trip.TripStatusResponse:
      type: object
      properties:
        costs:
          type: number
          description: Kosten für die Fahrt
          format: float
        carpoolInformation:
          $ref: '#/components/schemas/NemobilAPI.Model.CarpoolInformation'
        skills:
          type: array
          items:
            $ref: '#/components/schemas/NemobilAPI.Model.Skill'
          description: 'Besonderheiten z.B: Kinderwagen, Rollstuhl, sonst. Einschränkungen'
          nullable: true
        requestedAdults:
          type: integer
          description: Wie viele Erwachsene sollen transportiert werden
          format: int32
        requestedChilds:
          type: integer
          description: Wie viele Kinder sollen transportiert werden
          format: int32
        luggage:
          type: integer
          description: Gepäck
          format: int32
        status:
          enum:
            - 0 - Unplanned
            - 1 - Planned
            - 2 - Started
            - 3 - Performed
          type: integer
          description: Status der Fahrt
          format: int32
        pickupTime:
          type: string
          description: "Geplante Abholzeit\r\nToleranz - Range => Interval"
          format: date-time
        targetTime:
          type: string
          description: "Erwartete Ankunftszeit\r\nToleranz - Range => Interval"
          format: date-time
        targetTimeMin:
          type: string
          description: Frühste erwartete Ankunftszeit
          format: date-time
        targetTimeMax:
          type: string
          description: Späteste erwartete Ankunftszeit
          format: date-time
      additionalProperties: false
      description: Rückgabe einer Statusabfrage der Buchung

    Vehicle:
      description: "Stammdaten eines Fahrzeuges"
    VehicleSchedule:
      description: "Ein Fahrzeug das in einem definierten Zeit&Raum operiert"

    NemobilAPI.Contracts.VehicleSchedule.Data.CabSchedule:
      description: "Ein fahrzeug für ein Zeitfenster"
      required:
        - label
        - licensePlate
      type: object
      properties:
        id:
          type: string
          description: Id des Fahrzeug Einsatzblocks
          format: uuid
        schedule:
          $ref: '#/components/schemas/NemobilAPI.Model.Schedule'
        label:
          maxLength: 150
          minLength: 1
          type: string
          description: Name des Fahrzeugs
        licensePlate:
          maxLength: 15
          minLength: 1
          type: string
          description: Nummernschild des Fahrzeugs
        powerConsumption:
          $ref: '#/components/schemas/NemobilAPI.Model.PowerConsumptionParameter'
        flatratPowerConsumption:
          type: number
          description: Pauschaler Energieverbrauch
          format: float
        risk:
          type: number
          description: Wie viel Toleranz sollen wir bei der Restreichweite lassen
          format: float
        totalEnergyCapacity:
          type: number
          description: Wie viel Energie kann das Fahrzeug insgesamt speichern
          format: float
        initialEnergyCapacity:
          type: number
          description: "Mit wie viel Energie startet das Fahrzeug den Dienst\r\nEnergie mit dem Start überprüfen"
          format: float
        initialLocation:
          $ref: '#/components/schemas/NemobilAPI.Model.Location'
        maxSpeed:
          type: number
          description: Was ist die maximale Geschwindigkeit des Fahrzeugs
          format: float
        regenerativePower:
          type: number
          description: Energie, die das Fahrzeug ins Netz speisen kann
          format: float
        operatingCompany:
          type: string
          description: "Welchem Betreiber ist dieses Fahrzeug zugeordnet\r\nDetails of the organization that is operating this fleet vehicle."
          format: uuid
        maxiumRegenerativePower:
          type: number
          description: Maximale Rückspeiseleistung
          format: float
        defaultEnergyConsuptionPerKm:
          type: integer
          description: Geschätzer Durchschnittsverbrauch pro Kilometer
          format: int32
        skills:
          type: array
          items:
            type: integer
            format: int32
          description: "Welche Features bietet das Cab?\r\n- 1 => Rollstuhl bspw."
          nullable: true
        restrictions:
          type: object
          additionalProperties:
            type: number
            format: float
            nullable: true
          description: "Kapazitäten des Cabs\r\nBspw. \"Personen\": 4"
          nullable: true
        chargingCurve:
          type: array
          items:
            type: number
            format: float
          description: "Wie entwickelt sich die Ladekurve\r\n[0] => 0% \r\nAlternativ: Wie viel lange wird für 5% im passenden Korridor gebraucht?"
          nullable: true
        maxSpeedAutonomous:
          type: number
          description: Maximale Geschwindigkeit autonom
          format: float
      additionalProperties: false
      description: Cab-Fahrzeug Eintrag
    NemobilAPI.Contracts.VehicleSchedule.Data.ProSchedule:
      required:
        - label
        - licensePlate
      type: object
      properties:
        id:
          type: string
          description: Id des Fahrzeug Einsatzblocks
          format: uuid
        schedule:
          $ref: '#/components/schemas/NemobilAPI.Model.Schedule'
        label:
          maxLength: 150
          minLength: 1
          type: string
          description: Name des Fahrzeugs
        licensePlate:
          maxLength: 15
          minLength: 1
          type: string
          description: Nummernschild des Fahrzeugs
        powerConsumption:
          $ref: '#/components/schemas/NemobilAPI.Model.PowerConsumptionParameter'
        flatratPowerConsumption:
          type: number
          description: Pauschaler Energieverbrauch
          format: float
        risk:
          type: number
          description: Wie viel Toleranz sollen wir bei der Restreichweite lassen
          format: float
        totalEnergyCapacity:
          type: number
          description: Wie viel Energie kann das Fahrzeug insgesamt speichern
          format: float
        initialEnergyCapacity:
          type: number
          description: "Mit wie viel Energie startet das Fahrzeug den Dienst\r\nEnergie mit dem Start überprüfen"
          format: float
        initialLocation:
          $ref: '#/components/schemas/NemobilAPI.Model.Location'
        maxSpeed:
          type: number
          description: Was ist die maximale Geschwindigkeit des Fahrzeugs
          format: float
        regenerativePower:
          type: number
          description: Energie, die das Fahrzeug ins Netz speisen kann
          format: float
        operatingCompany:
          type: string
          description: "Welchem Betreiber ist dieses Fahrzeug zugeordnet\r\nDetails of the organization that is operating this fleet vehicle."
          format: uuid
        maxiumRegenerativePower:
          type: number
          description: Maximale Rückspeiseleistung
          format: float
        defaultEnergyConsuptionPerKm:
          type: integer
          description: Geschätzer Durchschnittsverbrauch pro Kilometer
          format: int32
        maxCabChain:
          type: integer
          description: Wie viele Cabs können maximal an das Pro gehangen werden
          format: int32
        additionalEnergyConsumptionPerCab:
          type: array
          items:
            type: number
            format: float
          description: Liste mit zusätzlichem Verbrauch pro angehangenem Cab
          nullable: true
      additionalProperties: false
      description: Pro-Fahrzeug Eintrag
    NemobilAPI.Contracts.WeatherForecast:
      type: object
      properties:
        forecastGuid:
          type: string
          description: Unique identifier of the entity
          format: uuid
        dateCreated:
          type: string
          description: Entity creation timestamp
          format: date-time
        temperature:
          type: number
          description: Temperature of the item
          format: float
        region:
          type: array
          items:
            $ref: '#/components/schemas/NemobilAPI.Model.Location'
          description: Bereich, in dem die Wettervorhersage gültig ist
          nullable: true
        areaServed:
          type: array
          items:
            $ref: '#/components/schemas/NemobilAPI.Model.Location'
          description: "Alternative zu Region\r\nThe geographic area where a service or offered item is provided"
          nullable: true
        gustSpeed:
          type: number
          description: A sudden burst of high-speed wind over the observed average wind speed lasting only for a few seconds
          format: float
        wetStreet:
          type: boolean
          description: Nasse Straßen brauchen mehr Energie
        snowHeight:
          type: number
          description: https://github.com/smart-data-models/dataModel.Weather/blob/master/WeatherObserved/doc/spec.md
          format: float
        validFrom:
          type: string
          description: Validity period start date and time
          format: date-time
        validTo:
          type: string
          description: Validity period end date and time
          format: date-time
        windDirection:
          type: integer
          description: Direction of the wind bet
          format: int32
        windSpeed:
          type: integer
          description: Intensity of the wind
          format: int32
      additionalProperties: false
      description: "Wettervorhersage\r\nhttps://github.com/smart-data-models/dataModel.Weather/blob/master/WeatherForecast/doc/spec.md"
    NemobilAPI.Model.CarpoolInformation:
      type: object
      properties:
        passengersOnBoard:
          type: boolean
          description: Sind bereits Mitfahrer im Cab
        passengerBoarding:
          type: boolean
          description: Steigt während der Fahrt jemand hinzu
      additionalProperties: false
      description: Informationen über Carpooling
    NemobilAPI.Model.ChainingLocation:
      type: object
      properties:
        locationStart:
          $ref: '#/components/schemas/NemobilAPI.Model.Location'
        locationEnd:
          $ref: '#/components/schemas/NemobilAPI.Model.Location'
        additionalTime:
          type: integer
          description: Zusätzliche Zeit durch besondere Gegebenheiten
          format: int32
      additionalProperties: false
      description: "Ort an dem ein Kupplungsvorgang stattfinden kann\r\nDie Kopplung soll langfristig auf geraden Strecken ermöglicht werden, daher gibt es einen Start und einen Endpunkt."
    NemobilAPI.Model.Charging.ChargingOperator:
      type: object
      additionalProperties: false
      description: "Betreiber: operator\r\nWie bildet man die Preisprofile ab?\r\nFortlaufende Daten. Zeitreihentabelle. Werden die Daten später nochmal gebraucht?\r\nPreisprofil (15 Min pro Anbieter (pro 24h)) (Sensor)\r\nEinspeise-Preisprofil (15 Min pro Anbieter (pro 24h)) (Sensor)\r\nPro Profil einen Betreiber hinterlegen, eine Station kann x Profile haben"
    NemobilAPI.Model.Charging.ChargingPoint:
      type: object
      properties:
        location:
          $ref: '#/components/schemas/NemobilAPI.Model.Location'
        maximumStoppingTime:
          type: number
          description: Maximale Standzeit in Sekunden
          format: float
        guid:
          type: string
          description: Kennung der Ladesäule
          format: uuid
        type:
          enum:
            - 0 - Electric
            - 1 - Hydrogen
          type: integer
          description: Typ der Ladesäule
          format: int32
        state:
          enum:
            - 0 - Free
            - 1 - InUse
            - 2 - Maintenance
          type: integer
          description: "Status der Ladesäule\r\n\r\nstatus[string]: Status der Ladestation.Enum:'almostEmpty, almostFull, empty, full, outOfService, withIncidence, working'. Oder jede andere anwendungsspezifische."
          format: int32
        maximumPowerSupply:
          type: number
          description: Maximale Leistung der Ladesäule
          format: float
        maximumRegenerativePower:
          type: number
          description: Maximale Einspeiseleistung von Fahrzeugen
          format: float
        openingHours:
          type: array
          items:
            $ref: '#/components/schemas/NemobilAPI.Model.OpeningTimeEntry'
          description: Öffnungszeiten der Ladestation
          nullable: true
        operators:
          type: array
          items:
            $ref: '#/components/schemas/NemobilAPI.Model.Charging.ChargingOperator'
          description: Welche Betreiber gibt es an diesem Ladepunkt
          nullable: true
        voltage:
          type: number
          description: Die von der Ladestation angebotene Gesamtspannung
          format: float
        amperage:
          type: number
          description: Die von der Ladestation angebotene Gesamtstromstärke
          format: float
        owner:
          type: string
          description: Eine Liste mit einer JSON-kodierten Zeichenfolge, die auf die eindeutigen Kennungen der Eigentümer verweist
          format: uuid
      additionalProperties: false
      description: "<br>Ladepunkt für ein Fahrzeug\r\n<br>https://github.com/smart-data-models/dataModel.Transportation/blob/master/EVChargingStation/doc/spec_DE.md\r\n<br>\r\n            TODO:\r\n            Trennung von Wasserstoff und Sauerstoff\r\n            Aktuelle Infos über Ladeleistung und freie Ladestellen\r\n            \r\n<br>\r\n            TODO:\r\n            ChargingHub ist eine erweiterte ParkingLocation mit weiteren Anzeigen - Charginghub Cab 1 - 1\r\n            Maximale Parkdauer\r\n            Betriebszeit (Tagesweise)\r\n            Status (Wartung, Belegt, Frei) (Sensor)\r\n            Preisprofil (15 Min pro Anbieter (pro 24h)) (Sensor)\r\n            \r\n<br>Maximale Rückspeiseleistung (+ Preis)"
    NemobilAPI.Model.Charging.PricingInfo:
      type: object
      properties:
        operator:
          type: string
          description: Lieferant des Stroms
          format: uuid
        costPerInterval:
          type: array
          items:
            type: integer
            format: int32
          description: "Cost of the energy in cent. 15 min intervals \r\n0 => 0 - 0:14\r\n1 => 0:15 - 0:29\r\n...\r\n95 => 23:45 - 23:59"
          nullable: true
      additionalProperties: false
      description: Kosten für das Laden oder Vergütung für eingespeiste Energie pro kWh
    NemobilAPI.Model.Interval:
      type: object
      additionalProperties: false
    NemobilAPI.Model.Location:
      type: object
      properties:
        longitude:
          type: number
          format: double
        latitude:
          type: number
          format: double
      additionalProperties: false
    NemobilAPI.Model.OpeningTimeEntry:
      type: object
      properties:
        weekDays:
          enum:
            - 0 - None
            - 1 - Sunday
            - 2 - Monday
            - 4 - Tuesday
            - 8 - Wednesday
            - 16 - Thursday
            - 32 - Friday
            - 64 - Saturday
            - 127 - All
          type: integer
          description: Gets or sets the weekday.
          format: int32
        min:
          $ref: '#/components/schemas/System.TimeSpan'
        max:
          $ref: '#/components/schemas/System.TimeSpan'
      additionalProperties: false
      description: Element einer Öffnungszeit
    NemobilAPI.Model.PlanningConfiguration:
      type: object
      properties:
        toleranceDrivingTime:
          type: number
          description: Wie viel Toleranz sollen wir bei den Fahrzeiten beachten
          format: float
        toleranceCapacity:
          type: number
          description: Wie viel Toleranz sollen wir bei den Akkus berücksichtigen
          format: float
        chainTime:
          type: integer
          description: Zeit für die Kupplung einplanen
          format: int32
        proposalTimer:
          type: integer
          description: Wie lange sind die Vorschläge für die Kunden gültig
          format: int32
        proposalCount:
          type: integer
          description: Wie viele Vorschläge soll der Kunde bekommen
          format: int32
        planningHorizon:
          type: integer
          description: Wie viele Stunden im vorraus soll geplant werden
          format: int32
        chargingStartThreshold:
          type: number
          description: "Ab wann soll auf jeden Fall geladen werden\r\nPro und Cab trennen?"
          format: float
        chargingEndThreshold:
          type: number
          description: "Ab wann kann aufegrhört werden zu laden\r\nPro und Cab trennen?"
          format: float
        useProThreshhold:
          type: number
          description: Bis zu welcher Distanz soll das Cab direkt fahren, ohne das ein Pro verwendet wird
          format: float
        mode:
          enum:
            - 0 - Insert
            - 1 - InsertOpt
            - 2 - InsertOptRelocate
          type: integer
          description: Planungs- und Optimierungsansatz
          format: int32
      additionalProperties: false
      description: Einstellungsmöglichkeiten der Planung
    NemobilAPI.Model.PowerConsumptionParameter:
      type: object
      properties:
        speed:
          type: number
          description: Hohe Geschwindigkeiten(über 65 MPH oder 105 km/h) können die Effizienz eines E-Autos erheblich verringern, was zu einem höheren Verbrauch führt.
          format: float
        wind:
          type: number
          description: Ein starker Gegenwind kann zu einem höheren Energieverbrauch führen.
          format: float
        loadCapacity:
          type: number
          description: Schwerere Lasten erhöhen den Energieverbrauch.Mehr Gewicht bedeutet, dass der Motor härter arbeiten muss.
          format: float
        tireTraction:
          type: number
          description: Eine schlechte Reifentraktion kann die Effizienz verringern und zu einem höheren Verbrauch führen.Eine ordnungsgemäße Wartung der Reifen gewährleistet eine optimale Traktion und kann dazu beitragen, den Energieverbrauch zu senken.
          format: float
        weatherConditions:
          type: number
          description: Extreme Temperaturen, sowohl heiß als auch kalt, beeinträchtigen die Batterieleistung, was zu einem höheren Energieverbrauch führen kann.
          format: float
        climatronic:
          type: number
          description: Die Nutzung der Heizungs-, Lüftungs- und Klimaanlagen in einem E-Auto verbraucht Energie.Daher kann eine übermäßige Nutzung der Klimaanlage die Reichweite verringern.
          format: float
        regenerativeBraking:
          type: number
          description: Es steigert die Effizienz von Elektroautos, wenn die kinetische Energie beim Bremsen in elektrische Energie umgewandelt wird und so die Fahrzeugbatterie wieder auflädt und den Energieverbrauch senkt.
          format: float
      additionalProperties: false
      description: "Faktoren, die den Verbrauch von Elektroautos beeinflussen\r\nhttps://www.cardino.de/blog-posts/berechnung-des-verbrauchs-ihres-elektroautos?0c368a56_page=2"
    NemobilAPI.Model.Schedule:
      type: object
      additionalProperties: false
      description: Zeitbereich
    NemobilAPI.Model.Skill:
      type: object
      properties:
        skillId:
          type: integer
          description: Id des Skills
          format: int32
        skillName:
          type: string
          description: Name des Skills
          nullable: true
      additionalProperties: false
      description: Skills, die Cabs von Nemobil erfüllen können
    NemobilAPI.Model.Trip:
      type: object
      properties:
        tripGuid:
          type: string
          description: Kennung der Fahrt
          format: uuid
        userGuid:
          type: string
          description: Anfragender User
          format: uuid
        creationTime:
          type: string
          description: Zeit der Anfrage
          format: date-time
        vehicleLabel:
          type: string
          description: "Fahrzeug für den Transport\r\nMehr Infos notwendig"
          nullable: true
        cabStartLocation:
          $ref: '#/components/schemas/NemobilAPI.Model.Location'
        cabTargetLocation:
          $ref: '#/components/schemas/NemobilAPI.Model.Location'
        pickupTime:
          type: string
          description: "Geplante Abholzeit\r\nToleranz - Range => Interval"
          format: date-time
        targetTime:
          type: string
          description: "Erwartete Ankunftszeit\r\nToleranz - Range => Interval"
          format: date-time
        costs:
          type: number
          description: Kosten für die Fahrt
          format: float
        carpoolInformation:
          $ref: '#/components/schemas/NemobilAPI.Model.CarpoolInformation'
        skills:
          type: array
          items:
            $ref: '#/components/schemas/NemobilAPI.Model.Skill'
          description: 'Besonderheiten z.B: Kinderwagen, Rollstuhl, sonst. Einschränkungen'
          nullable: true
        requestedAdults:
          type: integer
          description: Wie viele Erwachsene sollen transportiert werden
          format: int32
        requestedChilds:
          type: integer
          description: Wie viele Kinder sollen transportiert werden
          format: int32
        luggage:
          type: integer
          description: Gepäck
          format: int32
        maxCabs:
          type: integer
          description: Wie viele Cabs sollen für den Transport maximal kommen
          format: int32
        personalPreferences:
          $ref: '#/components/schemas/NemobilAPI.Contracts.RideRequest.CustomerPreferences'
        status:
          enum:
            - 0 - Unplanned
            - 1 - Planned
            - 2 - Started
            - 3 - Performed
          type: integer
          description: Status der Fahrt
          format: int32
        modificationDate:
          type: string
          description: Letztes Änderungsdatum
          format: date-time
        expectedEnergyRequired:
          type: number
          description: Geschätzte Energie für die Strecke
          format: float
        expectedDrivingTime:
          type: number
          description: Geschätzte Fahrzeit für die Strecke
          format: float
        expectedDistance:
          type: number
          description: Geschätzte Distanz für die Strecke
          format: float
      additionalProperties: false
      description: "Daten eines Trips\r\nhttps://github.com/smart-data-models/dataModel.Transportation/blob/master/FleetVehicleOperation/doc/spec.md"
    NemobilAPI.Model.TripHistory:
      type: object
      properties:
        tripGuid:
          type: string
          description: Kennung des Trips zu dem der Eintrag gehört
          format: uuid
        history:
          type: array
          items:
            $ref: '#/components/schemas/NemobilAPI.Model.TripHistoryEntry'
          description: Einträge der History
          nullable: true
      additionalProperties: false
      description: Änderungshistorie eines Trips
    NemobilAPI.Model.TripHistoryEntry:
      type: object
      additionalProperties: false
      description: Eintrag über Änderung an einer Fahrt
    NemobilAPI.Model.TripRequestProposal:
      type: object
      properties:
        vehicleLabel:
          type: string
          description: "Fahrzeug für den Transport\r\nMehr Infos notwendig"
          nullable: true
        cabStartLocation:
          $ref: '#/components/schemas/NemobilAPI.Model.Location'
        cabTargetLocation:
          $ref: '#/components/schemas/NemobilAPI.Model.Location'
        requestedStartLocation:
          $ref: '#/components/schemas/NemobilAPI.Model.Location'
        requestedTargetLocation:
          $ref: '#/components/schemas/NemobilAPI.Model.Location'
        pickupTime:
          type: string
          description: "Geplante Abholzeit\r\nToleranz - Range => Interval"
          format: date-time
        targetTime:
          type: string
          description: "Erwartete Ankunftszeit\r\nToleranz - Range => Interval"
          format: date-time
        costs:
          type: number
          description: Kosten für die Fahrt
          format: float
        carpoolInformation:
          $ref: '#/components/schemas/NemobilAPI.Model.CarpoolInformation'
        proposalReleaseTime:
          type: string
          description: Bis wann wird der Proposal freigehalten
          format: date-time
      additionalProperties: false
      description: Vorschlag für eine Fahrtanfrage
    System.TimeSpan:
      type: object
      properties:
        ticks:
          type: integer
          format: int64
        days:
          type: integer
          format: int32
          readOnly: true
        hours:
          type: integer
          format: int32
          readOnly: true
        milliseconds:
          type: integer
          format: int32
          readOnly: true
        minutes:
          type: integer
          format: int32
          readOnly: true
        seconds:
          type: integer
          format: int32
          readOnly: true
        totalDays:
          type: number
          format: double
          readOnly: true
        totalHours:
          type: number
          format: double
          readOnly: true
        totalMilliseconds:
          type: number
          format: double
          readOnly: true
        totalMinutes:
          type: number
          format: double
          readOnly: true
        totalSeconds:
          type: number
          format: double
          readOnly: true
      additionalProperties: false
